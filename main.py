import asyncio
import csv
from datetime import datetime
from telethon import TelegramClient, functions, types
import time

api_id = 77777777  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à
api_hash = "452g42fa3f56h" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à

client = TelegramClient("comment_user_scraper", api_id, api_hash)

def load_users_from_csv(filename="etalon_premium_users.csv"):
    users = []
    with open(filename, newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            time.sleep(2)
            try:
                user_id = int(row["user_id"])
                access_hash = int(row["access_hash"])
                users.append(types.InputPeerUser(user_id=user_id, access_hash=access_hash))
            except Exception as e:
                print(f"[!] –û—à–∏–±–∫–∞ –≤ CSV: {e}")
    return users

async def view_stories(peers):
    viewed = 0
    for peer in peers:
        try:
            user = await client.get_entity(peer)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ—Ä–∏—Å
            if (
                not getattr(user, "stories_unavailable", True)
                and not getattr(user, "stories_hidden", True)
                and getattr(user, "stories_max_id", None)
            ):
                await client(
                    functions.stories.ReadStoriesRequest(
                        peer=await client.get_input_entity(user), #user_id=user.id,
                        max_id=user.stories_max_id
                    )
                )
                viewed += 1
                print(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã —Å—Ç–æ—Ä–∏—Å: {user.username or user.id}")
                await asyncio.sleep(1.2)

                story_id = user.stories_max_id
                 # –ü—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚ù§Ô∏è)
                try:
                    await client(functions.stories.SendReactionRequest(
                        await client.get_input_entity(user), #peer=user.id,
                        story_id=story_id,
                        reaction=types.ReactionEmoji(emoticon="‚ù§Ô∏è")
                    ))
                    print(f"üí¨ –†–µ–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ‚ù§Ô∏è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username or user.id}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –†–µ–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {e}")

                await asyncio.sleep(5)  # 5 —Å–µ–∫—É–Ω–¥
            else:
                print(f"‚õî –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å: {user.username or user.id}")
                await asyncio.sleep(5)  # 5 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ —É {peer.user_id}: {e}")
            await asyncio.sleep(5)  # 5 —Å–µ–∫—É–Ω–¥
    return viewed

async def main_loop():
    await client.start()
    print("[+] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

    peers = load_users_from_csv()
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(peers)}")

    while True:
        print(f"\nüïì –¶–∏–∫–ª –∑–∞–ø—É—â–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        count = await view_stories(peers)
        print(f"‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {count} —Å—Ç–æ—Ä–∏—Å")

        print("‚è≥ –ñ–¥—É 2 —á–∞—Å–∞...\n")
        time.sleep(2 * 60 * 60)  # 2 —á–∞—Å–∞

# –ó–∞–ø—É—Å–∫
asyncio.run(main_loop())
